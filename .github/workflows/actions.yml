name: Build and Push Docker Images to ECR

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Repo
        uses: actions/checkout@v4
        with:
          repository: parishoffman/devops-midterm

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # - name: Build, tag, and push Docker images
      #   env:
      #     ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}
      #     TAG: latest
      #   run: |
      #     for service in view api; do
      #       cd $service
      #       docker build -t $service .

      #       docker tag $service $ECR_REPOSITORY:$service

      #       docker push $ECR_REPOSITORY:$service
      #       cd ..
      #     done
          
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: SSH into QA EC2 and update services
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPO: ${{ secrets.ECR_REPOSITORY_URI }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
        run: |
          # Using ssh-agent to handle the authentication
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no ubuntu@${EC2_HOST} << 'EOF'
            # Pull latest images
            docker login -u AWS -p $(aws ecr get-login-password --region $AWS_REGION) $ECR_REPOSITORY
            
            # Stop existing containers if they exist
            docker stop view api || true
            docker rm view api || true
            
            # Pull latest images
            docker pull $ECR_REPOSITORY:view
            docker pull $ECR_REPOSITORY:api
            
            # Start new containers
            docker run -d --name view -p 5173:5173 $ECR_REPOSITORY:view
            docker run -d --name api -p 8080:8080 \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DB_PASSWORD="$DB_USER" \
              -e DB_HOST="$DB_HOST" \
              -e DB_PORT="$DB_PORT" \
              -e DB_DATABASE="$DB_DATABASE" \
              $ECR_REPOSITORY:api
            
            # Cleanup old images
            docker image prune -a -f
          EOF
          
